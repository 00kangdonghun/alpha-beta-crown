start at: Sun Jun 15 14:18:33 KST 2025
node: n004
jobid: 431948
Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  verify_onnxruntime_output: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  prepare_only: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  buffer_has_batchdim: false
  save_output: false
  output_file: out.pkl
  return_optimized_model: false
model:
  name: 'Customized("fashion_model_data", "fashionmlp", in_features=784, out_dim=10)'
  path: /home1/danny472/alpha-beta-CROWN/complete_verifier/models/fashionmnist_mlp.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: [1, 1, 28, 28]
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: []
  onnx_vnnlib_joint_optimization_flags: none
  check_optimized: false
  flatten_final_output: false
  optimize_graph: null
  with_jacobian: false
data:
  start: 0
  end: 10
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: 'Customized("fashion_model_data", "fashionmnist")'
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.03
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 64
  auto_enlarge_batch_size: false
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  optimize_disjuncts_separately: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
    activation_bound_option: adaptive
    compare_crown_with_ibp: false
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_alphas: false
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    disable_optimization: []
    max_time: 1.0
  invprop:
    apply_output_constraints_to: []
    tighten_input_bounds: false
    best_of_oc_and_no_oc: false
    directly_optimize: []
    oc_lr: 0.1
    share_gammas: false
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 50
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    max_dim: 10000
    reset_threshold: 1.0
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    unstable_neuron_threshold: 0
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
    topk_filter: 1.0
    sliding_window: -1
    extra_constraint: false
    refine_neuron_timeout_increasement: 0
    timeout_neuron_percentage: 0.3
    remaining_timeout_threshold: 1
    remove_unstable_neurons: false
    lp_solver: false
bab:
  initial_max_domains: 1
  backing_up_max_domain: null
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  max_iterations: -1
  override_timeout: null
  get_upper_bound: false
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: true
  recompute_interm: false
  sort_domain_interval: -1
  vanilla_crown: false
  tree_traversal: depth_first
  cut:
    enabled: false
    cuts_path: /tmp/abcrown_cuts
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    biccos:
      enabled: false
      constraint_strengthening: true
      recursively_strengthening: false
      drop_ratio: 0.5
      verified_bonus: 0.3
      max_infer_iter: 20
      heuristic: neuron_influence_score
      save_biccos_cuts: false
      multi_tree_branching:
        enabled: false
        restore_best_tree: false
        keep_n_best_domains: 1
        k_splits: 1
        iterations: 1
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    nonlinear_split:
      method: bbps
      disable: false
      branching_point_method: uniform
      num_branches: 2
      filter: false
      filter_beta: false
      filter_clamp: false
      filter_batch_size: 10000
      filter_iterations: 25
      relu_only: false
      loose_tanh_threshold: null
      branching_point:
        db_path: branching_points.pt
        num_iterations: 1000
        batch_size: 1000000
        range_l: -5.0
        range_u: 5.0
        log_interval: 100
        step_size_1d: 0.01
        step_size: 0.2
    input_split:
      enable_clip_domains: false
      split_hint: null
      reorder_bab: false
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_sum: false
      sb_primary_spec: null
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_iters: 1000000000.0
      bf_batch_size: 100000
      bf_zero_crossing_score: false
      touch_zero_score: 0
      ibp_enhancement: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
      sb_coeff_thresh: 0.001
      sort_index: null
      sort_descending: true
      show_progress: false
      presplit_domains: null
      skip_getting_worst_domain: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 30
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_alpha_scale: false
  pgd_loss_mode: null
  pgd_restart_when_stuck: false
  enable_mip_attack: false
  adv_saver: default_adv_saver
  adv_verifier: default_adv_verifier
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    enabled: auto
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0
  print_verbose_decisions: false
  sanity_check: null
  save_minimal_config: null
  save_minimal_config_omit_keys: []

Experiments at Sun Jun 15 14:18:38 2025 on n004.hpc
SimpleMLP(
  (fc1): Linear(in_features=784, out_features=128, bias=True)
  (fc2): Linear(in_features=128, out_features=10, bias=True)
)
Parameters:
  fc1.weight: shape torch.Size([128, 784])
  fc1.bias: shape torch.Size([128])
  fc2.weight: shape torch.Size([10, 128])
  fc2.bias: shape torch.Size([10])
Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz
Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to /gpfs/home1/danny472/alpha-beta-CROWN/complete_verifier/custom/../datasets/FashionMNIST/raw/train-images-idx3-ubyte.gz
Extracting /gpfs/home1/danny472/alpha-beta-CROWN/complete_verifier/custom/../datasets/FashionMNIST/raw/train-images-idx3-ubyte.gz to /gpfs/home1/danny472/alpha-beta-CROWN/complete_verifier/custom/../datasets/FashionMNIST/raw

Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz
Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to /gpfs/home1/danny472/alpha-beta-CROWN/complete_verifier/custom/../datasets/FashionMNIST/raw/train-labels-idx1-ubyte.gz
Extracting /gpfs/home1/danny472/alpha-beta-CROWN/complete_verifier/custom/../datasets/FashionMNIST/raw/train-labels-idx1-ubyte.gz to /gpfs/home1/danny472/alpha-beta-CROWN/complete_verifier/custom/../datasets/FashionMNIST/raw

Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz
Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to /gpfs/home1/danny472/alpha-beta-CROWN/complete_verifier/custom/../datasets/FashionMNIST/raw/t10k-images-idx3-ubyte.gz
Extracting /gpfs/home1/danny472/alpha-beta-CROWN/complete_verifier/custom/../datasets/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to /gpfs/home1/danny472/alpha-beta-CROWN/complete_verifier/custom/../datasets/FashionMNIST/raw

Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz
Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to /gpfs/home1/danny472/alpha-beta-CROWN/complete_verifier/custom/../datasets/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz
Extracting /gpfs/home1/danny472/alpha-beta-CROWN/complete_verifier/custom/../datasets/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to /gpfs/home1/danny472/alpha-beta-CROWN/complete_verifier/custom/../datasets/FashionMNIST/raw

Internal results will be saved to out.txt.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.007500000298023224, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.51448965,  -8.54872036,  -8.74429035, -10.29862976,  -6.50535202,
           1.30881858,  -7.05356026,   1.77361679,  -2.18800354,   3.70723414]],
       device='cuda:0')
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.22617912,  -9.29988575,  -8.94691944, -11.12491894,  -6.48692274,
            4.25561810,  -7.33443499,   1.22158742,  -2.18650532,   1.11167645],
         [ -8.22617912,  -9.29988575,  -8.94691944, -11.12491894,  -6.48692274,
            4.25561810,  -7.33443499,   1.22158742,  -2.18650532,   1.11167645]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 9.33785534, 10.41156197, 10.05859566, 12.23659515,  7.59859943,
          -3.14394164,  8.44611168, -0.10991096,  3.29818177]]],
       device='cuda:0')
number of violation:  2
Attack finished in 0.6623 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
Result: unsafe-pgd in 0.8399 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 1, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.007500000298023224, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -3.79359388, -12.06292534,   7.30235386,  -6.08697414,   2.29561329,
         -21.51387024,   2.04045248, -23.64888000,  -5.27323437, -20.74601936]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -4.82998800, -11.51444054,   6.27133512,  -6.31431866,   3.94977522,
          -21.91368484,   2.57564259, -23.93087387,  -4.61243057, -20.44746971],
         [ -4.82998800, -11.51444054,   6.27133512,  -6.31431866,   3.94977522,
          -21.91368484,   2.57564259, -23.93087387,  -4.61243057, -20.44746971]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[11.10132313, 17.78577614, 12.58565331,  2.32155991, 28.18502045,
           3.69569254, 30.20220947, 10.88376617, 26.71880531]]],
       device='cuda:0')
number of violation:  0
Attack finished in 0.1717 seconds.
PGD attack failed
verified_status unknown
verified_success False
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundShape(name=/5, inputs=[/0], perturbed=False)
  (/6): BoundConstant(name=/6, value=0)
  (/7): BoundGather(name=/7, inputs=[/5, /6], perturbed=False)
  (/8): BoundConstant(name=/8, value=-1)
  (/9): BoundConstant(name=/9, value=tensor([0], device='cuda:0'))
  (/10): BoundUnsqueeze(name=/10, inputs=[/7, /9], perturbed=False)
  (/11): BoundConstant(name=/11, value=tensor([0], device='cuda:0'))
  (/12): BoundUnsqueeze(name=/12, inputs=[/8, /11], perturbed=False)
  (/13): BoundConcat(name=/13, inputs=[/10, /12], perturbed=False)
  (/14): BoundReshape(name=/14, inputs=[/0, /13], perturbed=True)
  (/15): BoundLinear(name=/15, inputs=[/14, /1, /2], perturbed=True)
  (/16): BoundRelu(name=/16, inputs=[/15], perturbed=True)
  (/17): BoundLinear(name=/17, inputs=[/16, /3, /4], perturbed=True)
)
Original output: tensor([[ -3.79359317, -12.06292534,   7.30235338,  -6.08697462,   2.29561329,
         -21.51387024,   2.04045224, -23.64888000,  -5.27323437, -20.74601936]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/16, inputs=[/15], perturbed=True)
layer /16 using sparse-features alpha with shape [31]; unstable size 31; total size 128 ([1, 128])
layer /16 start_node /17 using full alpha [2, 9, 1, 31] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 8.56376457, 14.53949070,  9.95666504,  2.03166914, 23.83736801,
          1.97385216, 25.65858459,  8.42335033, 23.49820137]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.6505 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 2, vnnlib ID: 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.007500000298023224, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -0.33143157,  11.65702343,  -2.80211735,  -0.68732607,  -3.54782295,
         -17.88527298,  -6.57099152, -11.88490486,  -6.72592735, -16.39494705]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[  1.34613061,   9.99748135,  -2.89725304,  -1.10514438,  -3.97637177,
          -18.25043869,  -5.39936113, -12.57875156,  -6.37898254, -16.13325691],
         [  1.34613061,   9.99748135,  -2.89725304,  -1.10514438,  -3.97637177,
          -18.25043869,  -5.39936113, -12.57875156,  -6.37898254, -16.13325691]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 8.65135098, 12.89473438, 11.10262585, 13.97385311, 28.24792099,
          15.39684296, 22.57623291, 16.37646484, 26.13073730]]],
       device='cuda:0')
number of violation:  0
Attack finished in 0.1685 seconds.
PGD attack failed
verified_status unknown
verified_success False
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundShape(name=/5, inputs=[/0], perturbed=False)
  (/6): BoundConstant(name=/6, value=0)
  (/7): BoundGather(name=/7, inputs=[/5, /6], perturbed=False)
  (/8): BoundConstant(name=/8, value=-1)
  (/9): BoundConstant(name=/9, value=tensor([0], device='cuda:0'))
  (/10): BoundUnsqueeze(name=/10, inputs=[/7, /9], perturbed=False)
  (/11): BoundConstant(name=/11, value=tensor([0], device='cuda:0'))
  (/12): BoundUnsqueeze(name=/12, inputs=[/8, /11], perturbed=False)
  (/13): BoundConcat(name=/13, inputs=[/10, /12], perturbed=False)
  (/14): BoundReshape(name=/14, inputs=[/0, /13], perturbed=True)
  (/15): BoundLinear(name=/15, inputs=[/14, /1, /2], perturbed=True)
  (/16): BoundRelu(name=/16, inputs=[/15], perturbed=True)
  (/17): BoundLinear(name=/17, inputs=[/16, /3, /4], perturbed=True)
)
Original output: tensor([[ -0.33143133,  11.65702343,  -2.80211735,  -0.68732607,  -3.54782295,
         -17.88527298,  -6.57099152, -11.88490486,  -6.72592640, -16.39494896]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/16, inputs=[/15], perturbed=True)
layer /16 using sparse-features alpha with shape [35]; unstable size 35; total size 128 ([1, 128])
layer /16 start_node /17 using full alpha [2, 9, 1, 35] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 7.33014965, 10.00533485,  8.08899689, 10.53590775, 23.73126602,
         13.40592670, 18.50475121, 13.20207977, 22.86897087]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.1923 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 3, vnnlib ID: 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.007500000298023224, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -2.51726675,   9.79332256,  -3.24447536,   1.95439398,  -3.48861980,
         -13.84893036,  -6.77070808, -10.34730530,  -8.46691513,  -9.89367294]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -2.88208246,   7.98873901,  -3.11491513,   2.96896148,  -3.22227526,
          -13.54607487,  -6.73627281, -10.74425125,  -8.30520916,  -9.87003899],
         [ -2.88208246,   7.98873901,  -3.11491513,   2.96896148,  -3.22227526,
          -13.54607487,  -6.73627281, -10.74425125,  -8.30520916,  -9.87003899]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[10.87082100, 11.10365391,  5.01977730, 11.21101379, 21.53481293,
          14.72501183, 18.73299026, 16.29394913, 17.85877800]]],
       device='cuda:0')
number of violation:  0
Attack finished in 0.1658 seconds.
PGD attack failed
verified_status unknown
verified_success False
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundShape(name=/5, inputs=[/0], perturbed=False)
  (/6): BoundConstant(name=/6, value=0)
  (/7): BoundGather(name=/7, inputs=[/5, /6], perturbed=False)
  (/8): BoundConstant(name=/8, value=-1)
  (/9): BoundConstant(name=/9, value=tensor([0], device='cuda:0'))
  (/10): BoundUnsqueeze(name=/10, inputs=[/7, /9], perturbed=False)
  (/11): BoundConstant(name=/11, value=tensor([0], device='cuda:0'))
  (/12): BoundUnsqueeze(name=/12, inputs=[/8, /11], perturbed=False)
  (/13): BoundConcat(name=/13, inputs=[/10, /12], perturbed=False)
  (/14): BoundReshape(name=/14, inputs=[/0, /13], perturbed=True)
  (/15): BoundLinear(name=/15, inputs=[/14, /1, /2], perturbed=True)
  (/16): BoundRelu(name=/16, inputs=[/15], perturbed=True)
  (/17): BoundLinear(name=/17, inputs=[/16, /3, /4], perturbed=True)
)
Original output: tensor([[ -2.51726675,   9.79332256,  -3.24447536,   1.95439398,  -3.48861980,
         -13.84892941,  -6.77070808, -10.34730530,  -8.46691513,  -9.89367294]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/16, inputs=[/15], perturbed=True)
layer /16 using sparse-features alpha with shape [36]; unstable size 36; total size 128 ([1, 128])
layer /16 start_node /17 using full alpha [2, 9, 1, 36] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 7.64245987,  8.46016693,  3.57042694,  8.63218594, 17.62516403,
         11.72743511, 15.09352875, 12.96128368, 14.50149441]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.1885 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 4, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.007500000298023224, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[  1.16493011,  -6.32881355,   0.53190190,  -2.09430957,  -1.14993954,
         -11.72308445,   3.73473549, -11.14220333,  -2.61893463,  -9.99515152]],
       device='cuda:0')
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[  2.45368195,  -4.98953962,   1.08598363,  -1.72095883,  -2.03701758,
          -12.51990986,   2.37989473, -10.78904915,  -2.57501411, -10.35359287],
         [  2.45368195,  -4.98953962,   1.08598363,  -1.72095883,  -2.03701758,
          -12.51990986,   2.37989473, -10.78904915,  -2.57501411, -10.35359287]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.07378721,  7.36943436,  1.29391110,  4.10085344,  4.41691208,
          14.89980507, 13.16894341,  4.95490885, 12.73348808]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0072 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
Result: unsafe-pgd in 0.0081 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 5, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.007500000298023224, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[  1.18253946,   8.34990215,  -2.23291683,  -1.14280403,  -2.28275228,
         -17.05301285,  -3.01491094, -11.95119667,  -6.79173613, -15.57484627]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[  2.77747607,   6.41613531,  -2.31000900,  -1.74552929,  -2.67389917,
          -17.51315689,  -1.81884027, -12.70066929,  -6.76662588, -15.20587444],
         [  2.77747607,   6.41613531,  -2.31000900,  -1.74552929,  -2.67389917,
          -17.51315689,  -1.81884027, -12.70066929,  -6.76662588, -15.20587444]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 3.63865924,  8.72614479,  8.16166496,  9.09003448, 23.92929268,
           8.23497581, 19.11680412, 13.18276119, 21.62200928]]],
       device='cuda:0')
number of violation:  0
Attack finished in 0.1664 seconds.
PGD attack failed
verified_status unknown
verified_success False
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundShape(name=/5, inputs=[/0], perturbed=False)
  (/6): BoundConstant(name=/6, value=0)
  (/7): BoundGather(name=/7, inputs=[/5, /6], perturbed=False)
  (/8): BoundConstant(name=/8, value=-1)
  (/9): BoundConstant(name=/9, value=tensor([0], device='cuda:0'))
  (/10): BoundUnsqueeze(name=/10, inputs=[/7, /9], perturbed=False)
  (/11): BoundConstant(name=/11, value=tensor([0], device='cuda:0'))
  (/12): BoundUnsqueeze(name=/12, inputs=[/8, /11], perturbed=False)
  (/13): BoundConcat(name=/13, inputs=[/10, /12], perturbed=False)
  (/14): BoundReshape(name=/14, inputs=[/0, /13], perturbed=True)
  (/15): BoundLinear(name=/15, inputs=[/14, /1, /2], perturbed=True)
  (/16): BoundRelu(name=/16, inputs=[/15], perturbed=True)
  (/17): BoundLinear(name=/17, inputs=[/16, /3, /4], perturbed=True)
)
Original output: tensor([[  1.18253946,   8.34990215,  -2.23291683,  -1.14280427,  -2.28275228,
         -17.05301285,  -3.01491094, -11.95119667,  -6.79173613, -15.57484531]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/16, inputs=[/15], perturbed=True)
layer /16 using sparse-features alpha with shape [36]; unstable size 36; total size 128 ([1, 128])
layer /16 start_node /17 using full alpha [2, 9, 1, 36] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.32879972,  6.03923178,  5.35157919,  5.82157850, 19.88212776,
          6.37279320, 15.33149433, 10.24838638, 18.48783684]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.1885 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 6, vnnlib ID: 6 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.007500000298023224, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.70970201e+00, -3.92962670e+00, -2.92602926e-04, -3.01856732e+00,
          4.67071056e+00, -7.10980892e+00,  6.34208322e-01, -1.09033241e+01,
         -3.60802984e+00, -1.32399120e+01]], device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -2.98107386,  -3.75920773,  -1.08366621,  -2.86652493,   2.74466324,
           -7.76763153,   2.06014276,  -9.69562435,  -3.96263719, -11.52327442],
         [ -2.98107386,  -3.75920773,  -1.08366621,  -2.86652493,   2.74466324,
           -7.76763153,   2.06014276,  -9.69562435,  -3.96263719, -11.52327442]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 5.72573709,  6.50387096,  3.82832956,  5.61118793, 10.51229477,
           0.68452048, 12.44028759,  6.70730019, 14.26793766]]],
       device='cuda:0')
number of violation:  0
Attack finished in 0.1658 seconds.
PGD attack failed
verified_status unknown
verified_success False
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundShape(name=/5, inputs=[/0], perturbed=False)
  (/6): BoundConstant(name=/6, value=0)
  (/7): BoundGather(name=/7, inputs=[/5, /6], perturbed=False)
  (/8): BoundConstant(name=/8, value=-1)
  (/9): BoundConstant(name=/9, value=tensor([0], device='cuda:0'))
  (/10): BoundUnsqueeze(name=/10, inputs=[/7, /9], perturbed=False)
  (/11): BoundConstant(name=/11, value=tensor([0], device='cuda:0'))
  (/12): BoundUnsqueeze(name=/12, inputs=[/8, /11], perturbed=False)
  (/13): BoundConcat(name=/13, inputs=[/10, /12], perturbed=False)
  (/14): BoundReshape(name=/14, inputs=[/0, /13], perturbed=True)
  (/15): BoundLinear(name=/15, inputs=[/14, /1, /2], perturbed=True)
  (/16): BoundRelu(name=/16, inputs=[/15], perturbed=True)
  (/17): BoundLinear(name=/17, inputs=[/16, /3, /4], perturbed=True)
)
Original output: tensor([[-4.70970201e+00, -3.92962646e+00, -2.92543322e-04, -3.01856685e+00,
          4.67071056e+00, -7.10980988e+00,  6.34208202e-01, -1.09033241e+01,
         -3.60802984e+00, -1.32399120e+01]], device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/16, inputs=[/15], perturbed=True)
layer /16 using sparse-features alpha with shape [63]; unstable size 63; total size 128 ([1, 128])
layer /16 start_node /17 using full alpha [2, 9, 1, 63] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.10042572,  3.21201181,  1.43323660,  2.77476430,  5.06188679,
         -1.13374376,  8.32632065,  2.46647882, 11.08691692]], device='cuda:0') None
Early stop at 37th iter due to 10 iterations no improvement!
best_l after optimization: 36.82225036621094
alpha/beta optimization time: 0.7763969898223877
initial alpha-crown bounds: tensor([[ 3.10493469,  3.32602525,  1.44103098,  2.80696774,  5.09379292,
         -1.10341167,  8.43226433,  2.58276892, 11.13787460]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -1.1034116744995117
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 128])]

Properties batch 0, size 1
Remaining timeout: 359.03307819366455
Verifying property 0 with 1 instances.
##### Instance 6 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.1049346923828125.

Properties batch 1, size 1
Remaining timeout: 358.873042345047
Verifying property 1 with 1 instances.
##### Instance 6 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.3260252475738525.

Properties batch 2, size 1
Remaining timeout: 358.7707974910736
Verifying property 2 with 1 instances.
##### Instance 6 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.4410309791564941.

Properties batch 3, size 1
Remaining timeout: 358.6707754135132
Verifying property 3 with 1 instances.
##### Instance 6 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.8069677352905273.

Properties batch 4, size 1
Remaining timeout: 358.57127261161804
Verifying property 4 with 1 instances.
##### Instance 6 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.093792915344238.

Properties batch 5, size 1
Remaining timeout: 358.4721312522888
Verifying property 5 with 1 instances.
##### Instance 6 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-1.10341167]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.70970201e+00, -3.92962646e+00, -2.92543322e-04, -3.01856685e+00,
         4.67071056e+00, -7.10980988e+00,  6.34208202e-01, -1.09033241e+01,
        -3.60802984e+00, -1.32399120e+01], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /16 start_node /17 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 128])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.10341167]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /15,/17
Keeping alphas for these layers: ['/17']
Keeping alphas for these layers: ['/17']
Node /16 input 0: size torch.Size([128]) unstable 63
-----------------
# of unstable neurons: 63
-----------------

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/15, 6] 
split level 1: [/15, 49] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 4 = 0.0
pruning-in-iteration extra time: 8.416175842285156e-05
Time: prepare 0.0004    bound 0.5067    transfer 0.0001    finalize 0.0005    func 0.5078    
Accumulated time: func 0.5078    prepare 0.0008    bound 0.5067    transfer 0.0001    finalize 0.0005    
Current worst splitting domains lb-rhs (depth):
-0.61902 (2), -0.40171 (2), -0.27479 (2), -0.18542 (2), 
Length of domains: 4
Time: pickout 0.0004    decision 0.1844    set_bounds 0.0007    solve 0.5078    add 0.0007    
Accumulated time: pickout 0.0004    decision 0.1844    set_bounds 0.0007    solve 0.5078    add 0.0007    
Current (lb-rhs): -0.6190185546875
4 domains visited
Cumulative time: 0.7004737854003906

BaB round 2
batch: 4
splitting decisions: 
split level 0: [/15, 5] [/15, 5] [/15, 5] [/15, 5] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 8 = 0.0
pruning-in-iteration extra time: 8.058547973632812e-05
Time: prepare 0.0005    bound 0.2444    transfer 0.0001    finalize 0.0002    func 0.2452    
Accumulated time: func 0.7529    prepare 0.0015    bound 0.7511    transfer 0.0002    finalize 0.0007    
Current worst splitting domains lb-rhs (depth):
-0.50416 (3), -0.36374 (3), -0.28241 (3), -0.20589 (3), -0.15171 (3), -0.10838 (3), -0.05810 (3), -0.03399 (3), 
Length of domains: 8
Time: pickout 0.0004    decision 0.0110    set_bounds 0.0008    solve 0.2452    add 0.0006    
Accumulated time: pickout 0.0008    decision 0.1954    set_bounds 0.0015    solve 0.7530    add 0.0013    
Current (lb-rhs): -0.504157543182373
12 domains visited
Cumulative time: 0.9587020874023438

BaB round 3
batch: 8
splitting decisions: 
split level 0: [/15, 127] [/15, 127] [/15, 127] [/15, 127] [/15, 127] [/15, 127] [/15, 25] [/15, 127] 
pruning_in_iteration open status: True
ratio of positive domain = 10 / 16 = 0.625
pruning-in-iteration extra time: 0.016003847122192383
Time: prepare 0.0006    bound 0.3162    transfer 0.0001    finalize 0.0002    func 0.3171    
Accumulated time: func 1.0701    prepare 0.0024    bound 1.0673    transfer 0.0003    finalize 0.0009    
Current worst splitting domains lb-rhs (depth):
-0.39400 (4), -0.25956 (4), -0.16586 (4), -0.13624 (4), -0.08165 (4), -0.02633 (4), 
Length of domains: 6
Time: pickout 0.0004    decision 0.0110    set_bounds 0.0011    solve 0.3172    add 0.0006    
Accumulated time: pickout 0.0012    decision 0.2064    set_bounds 0.0026    solve 1.0702    add 0.0019    
Current (lb-rhs): -0.3939950466156006
18 domains visited
Cumulative time: 1.2891898155212402

BaB round 4
batch: 6
splitting decisions: 
split level 0: [/15, 25] [/15, 25] [/15, 25] [/15, 127] [/15, 25] [/15, 127] 
pruning_in_iteration open status: True
ratio of positive domain = 6 / 12 = 0.5
pruning-in-iteration extra time: 0.015838146209716797
Time: prepare 0.0005    bound 0.2824    transfer 0.0001    finalize 0.0002    func 0.2833    
Accumulated time: func 1.3533    prepare 0.0032    bound 1.3496    transfer 0.0005    finalize 0.0011    
Current worst splitting domains lb-rhs (depth):
-0.29203 (5), -0.19517 (5), -0.15711 (5), -0.04895 (5), -0.02739 (5), -0.01016 (5), 
Length of domains: 6
Time: pickout 0.0004    decision 0.0110    set_bounds 0.0009    solve 0.2833    add 0.0006    
Accumulated time: pickout 0.0015    decision 0.2174    set_bounds 0.0035    solve 1.3535    add 0.0025    
Current (lb-rhs): -0.2920341491699219
24 domains visited
Cumulative time: 1.585566520690918

BaB round 5
batch: 6
splitting decisions: 
split level 0: [/15, 84] [/15, 63] [/15, 84] [/15, 63] [/15, 84] [/15, 84] 
Early stop at 41th iter due to 10 iterations no improvement!
pruning_in_iteration open status: True
ratio of positive domain = 8 / 12 = 0.6666666666666667
pruning-in-iteration extra time: 0.01325082778930664
Time: prepare 0.0005    bound 0.2344    transfer 0.0001    finalize 0.0002    func 0.2353    
Accumulated time: func 1.5886    prepare 0.0039    bound 1.5841    transfer 0.0006    finalize 0.0013    
Current worst splitting domains lb-rhs (depth):
-0.20867 (6), -0.11160 (6), -0.09956 (6), -0.08202 (6), 
Length of domains: 4
Time: pickout 0.0004    decision 0.0106    set_bounds 0.0009    solve 0.2353    add 0.0005    
Accumulated time: pickout 0.0019    decision 0.2280    set_bounds 0.0045    solve 1.5888    add 0.0030    
Current (lb-rhs): -0.20866799354553223
28 domains visited
Cumulative time: 1.8335046768188477

BaB round 6
batch: 4
splitting decisions: 
split level 0: [/15, 63] [/15, 78] [/15, 78] [/15, 78] 
pruning_in_iteration open status: True
ratio of positive domain = 2 / 8 = 0.25
pruning-in-iteration extra time: 0.014509439468383789
Time: prepare 0.0004    bound 0.2747    transfer 0.0001    finalize 0.0002    func 0.2755    
Accumulated time: func 1.8641    prepare 0.0046    bound 1.8588    transfer 0.0007    finalize 0.0014    
Current worst splitting domains lb-rhs (depth):
-0.12691 (7), -0.08894 (7), -0.02712 (7), -0.00661 (7), -0.00329 (7), -0.00004 (7), 
Length of domains: 6
Time: pickout 0.0004    decision 0.0105    set_bounds 0.0008    solve 0.2755    add 0.0005    
Accumulated time: pickout 0.0023    decision 0.2385    set_bounds 0.0052    solve 1.8643    add 0.0036    
Current (lb-rhs): -0.12691116333007812
34 domains visited
Cumulative time: 2.121283769607544

BaB round 7
batch: 6
splitting decisions: 
split level 0: [/15, 63] [/15, 63] [/15, 63] [/15, 78] [/15, 63] [/15, 63] 
Early stop at 24th iter due to 10 iterations no improvement!
pruning_in_iteration open status: True
ratio of positive domain = 10 / 12 = 0.8333333333333334
pruning-in-iteration extra time: 0.007750272750854492
Time: prepare 0.0005    bound 0.1336    transfer 0.0001    finalize 0.0002    func 0.1344    
Accumulated time: func 1.9985    prepare 0.0054    bound 1.9923    transfer 0.0009    finalize 0.0016    
Current worst splitting domains lb-rhs (depth):
-0.04674 (8), -0.00972 (8), 
Length of domains: 2
Time: pickout 0.0003    decision 0.0106    set_bounds 0.0009    solve 0.1344    add 0.0005    
Accumulated time: pickout 0.0026    decision 0.2491    set_bounds 0.0061    solve 1.9988    add 0.0040    
Current (lb-rhs): -0.046742916107177734
36 domains visited
Cumulative time: 2.268249034881592

BaB round 8
batch: 2
splitting decisions: 
split level 0: [/15, 102] [/15, 102] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 4 / 4 = 1.0
pruning-in-iteration extra time: 7.510185241699219e-05
Time: prepare 0.0004    bound 0.0043    transfer 0.0001    finalize 0.0002    func 0.0049    
Accumulated time: func 2.0034    prepare 0.0060    bound 1.9966    transfer 0.0009    finalize 0.0018    
Length of domains: 0
Time: pickout 0.0003    decision 0.0103    set_bounds 0.0006    solve 0.0049    add 0.0001    
Accumulated time: pickout 0.0029    decision 0.2594    set_bounds 0.0067    solve 2.0037    add 0.0041    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
36 domains visited
Cumulative time: 2.2845592498779297


Properties batch 6, size 1
Remaining timeout: 356.069860458374
Verifying property 6 with 1 instances.
##### Instance 6 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 8.43226432800293.

Properties batch 7, size 1
Remaining timeout: 355.94029211997986
Verifying property 7 with 1 instances.
##### Instance 6 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.5827689170837402.

Properties batch 8, size 1
Remaining timeout: 355.8382511138916
Verifying property 8 with 1 instances.
##### Instance 6 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 11.137874603271484.
Result: safe in 4.2623 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 7, vnnlib ID: 7 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.007500000298023224, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -3.24260616,  -8.30638313,   0.39898783,  -3.88535190,   1.98428667,
         -10.20968723,   5.66616058, -14.39274025,  -2.63995123, -10.60246944]],
       device='cuda:0')
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -4.20646000,  -6.73954916,   1.04856348,  -3.55061412,   3.51209164,
          -11.20106506,   3.45566821, -14.83358479,  -2.74214363, -11.10045910],
         [ -4.20646000,  -6.73954916,   1.04856348,  -3.55061412,   3.51209164,
          -11.20106506,   3.45566821, -14.83358479,  -2.74214363, -11.10045910]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 7.66212845, 10.19521713,  2.40710473,  7.00628233, -0.05642343,
          14.65673351, 18.28925323,  6.19781208, 14.55612755]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0105 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
Result: unsafe-pgd in 0.0118 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 8, vnnlib ID: 8 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.007500000298023224, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.50406551, -2.92526793, -2.41319275, -2.28552270, -4.70953369,
          3.39737463, -1.98527575, -0.06693530, -2.31946659, -3.83117366]],
       device='cuda:0')
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.05354905, -2.31018114, -2.57059479, -1.97766221, -4.61780548,
           1.54167104, -2.45916247,  1.54721177, -1.74865186, -3.18812394],
         [-3.05354905, -2.31018114, -2.57059479, -1.97766221, -4.61780548,
           1.54167104, -2.45916247,  1.54721177, -1.74865186, -3.18812394]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 4.59522009e+00,  3.85185218e+00,  4.11226559e+00,  3.51933336e+00,
           6.15947628e+00,  4.00083351e+00, -5.54072857e-03,  3.29032278e+00,
           4.72979498e+00]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0073 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
Result: unsafe-pgd in 0.0083 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 9, vnnlib ID: 9 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.007500000298023224, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.29612589, -6.99554205, -6.54581785, -5.98331547, -8.61978149,
          0.42227331, -5.23140430,  6.57049227, -1.16302240,  0.70524859]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.46061563, -7.76199389, -6.74456024, -7.24545527, -7.76529884,
           2.94719076, -5.38209677,  4.83164454, -1.98961174,  0.02692813],
         [-7.46061563, -7.76199389, -6.74456024, -7.24545527, -7.76529884,
           2.94719076, -5.38209677,  4.83164454, -1.98961174,  0.02692813]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[12.29226017, 12.59363842, 11.57620430, 12.07709980, 12.59694290,
           1.88445377, 10.21374130,  6.82125616,  4.80471659]]],
       device='cuda:0')
number of violation:  0
Attack finished in 0.1669 seconds.
PGD attack failed
verified_status unknown
verified_success False
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundShape(name=/5, inputs=[/0], perturbed=False)
  (/6): BoundConstant(name=/6, value=0)
  (/7): BoundGather(name=/7, inputs=[/5, /6], perturbed=False)
  (/8): BoundConstant(name=/8, value=-1)
  (/9): BoundConstant(name=/9, value=tensor([0], device='cuda:0'))
  (/10): BoundUnsqueeze(name=/10, inputs=[/7, /9], perturbed=False)
  (/11): BoundConstant(name=/11, value=tensor([0], device='cuda:0'))
  (/12): BoundUnsqueeze(name=/12, inputs=[/8, /11], perturbed=False)
  (/13): BoundConcat(name=/13, inputs=[/10, /12], perturbed=False)
  (/14): BoundReshape(name=/14, inputs=[/0, /13], perturbed=True)
  (/15): BoundLinear(name=/15, inputs=[/14, /1, /2], perturbed=True)
  (/16): BoundRelu(name=/16, inputs=[/15], perturbed=True)
  (/17): BoundLinear(name=/17, inputs=[/16, /3, /4], perturbed=True)
)
Original output: tensor([[-7.29612684, -6.99554157, -6.54581738, -5.98331499, -8.61978149,
          0.42227322, -5.23140430,  6.57049227, -1.16302252,  0.70524871]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/16, inputs=[/15], perturbed=True)
layer /16 using sparse-features alpha with shape [63]; unstable size 63; total size 128 ([1, 128])
layer /16 start_node /17 using full alpha [2, 9, 1, 63] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 8.35222054,  8.33914566,  7.76277065,  7.37066460,  9.19845963,
         -0.28947067,  6.08993816,  1.72420704,  1.27450657]], device='cuda:0') None
Early stop at 44th iter due to 10 iterations no improvement!
best_l after optimization: 50.29313659667969
alpha/beta optimization time: 0.24467062950134277
initial alpha-crown bounds: tensor([[ 8.40376091,  8.34922886,  7.79988956,  7.37072182,  9.22874260,
         -0.28947067,  6.10535240,  1.85092521,  1.47398520]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.2894706726074219
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 128])]

Properties batch 0, size 1
Remaining timeout: 359.5624942779541
Verifying property 0 with 1 instances.
##### Instance 9 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 8.40376091003418.

Properties batch 1, size 1
Remaining timeout: 359.4557914733887
Verifying property 1 with 1 instances.
##### Instance 9 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 8.349228858947754.

Properties batch 2, size 1
Remaining timeout: 359.3559455871582
Verifying property 2 with 1 instances.
##### Instance 9 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 7.79988956451416.

Properties batch 3, size 1
Remaining timeout: 359.2566843032837
Verifying property 3 with 1 instances.
##### Instance 9 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 7.370721817016602.

Properties batch 4, size 1
Remaining timeout: 359.1571395397186
Verifying property 4 with 1 instances.
##### Instance 9 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 9.228742599487305.

Properties batch 5, size 1
Remaining timeout: 359.0575349330902
Verifying property 5 with 1 instances.
##### Instance 9 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.28947067]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.29612684, -6.99554157, -6.54581738, -5.98331499, -8.61978149,
         0.42227322, -5.23140430,  6.57049227, -1.16302252,  0.70524871],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /16 start_node /17 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 128])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.28947067]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /15,/17
Keeping alphas for these layers: ['/17']
Keeping alphas for these layers: ['/17']
Node /16 input 0: size torch.Size([128]) unstable 63
-----------------
# of unstable neurons: 63
-----------------

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/15, 118] 
split level 1: [/15, 9] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 4 / 4 = 1.0
pruning-in-iteration extra time: 7.653236389160156e-05
Time: prepare 0.0003    bound 0.0044    transfer 0.0001    finalize 0.0002    func 0.0050    
Accumulated time: func 0.0050    prepare 0.0006    bound 0.0044    transfer 0.0001    finalize 0.0002    
Length of domains: 0
Time: pickout 0.0003    decision 0.0110    set_bounds 0.0006    solve 0.0051    add 0.0001    
Accumulated time: pickout 0.0003    decision 0.0110    set_bounds 0.0006    solve 0.0051    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.021755218505859375


Properties batch 6, size 1
Remaining timeout: 358.91790890693665
Verifying property 6 with 1 instances.
##### Instance 9 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.105352401733398.

Properties batch 7, size 1
Remaining timeout: 358.8148465156555
Verifying property 7 with 1 instances.
##### Instance 9 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.8509252071380615.

Properties batch 8, size 1
Remaining timeout: 358.7152123451233
Verifying property 8 with 1 instances.
##### Instance 9 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.473985195159912.
Result: safe in 1.3844 seconds
############# Summary #############
Final verified acc: 60.0% (total 10 examples)
Problem instances count: 10 , total verified (safe/unsat): 6 , total falsified (unsafe/sat): 4 , timeout: 0
mean time for ALL instances (total 10):0.7734712495390044, max time: 4.262286901473999
mean time for verified SAFE instances(total 6): 1.1444157759348552, max time: 4.262286901473999
mean time for verified (SAFE + UNSAFE) instances (total 10): 0.7734720230102539, max time: [0.8399333953857422, 0.008143901824951172, 0.011816978454589844, 0.008331298828125]
mean time for verified UNSAFE instances (total 4): 0.21705639362335205, max time: 0.8399333953857422
unsafe-pgd (total 4), index: [0, 4, 7, 8]
safe-incomplete (total 4), index: [1, 2, 3, 5]
safe (total 2), index: [6, 9]
